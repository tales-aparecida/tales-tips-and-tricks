<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Tales Tips and Tricks</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/</link><description>Recent content in Posts on Tales Tips and Tricks</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 27 Jun 2022 12:00:00 -0300</lastBuildDate><atom:link href="https://tales-aparecida.github.io/tales-tips-and-tricks/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>#TLDR - How to record your terminal into GIFs</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-how-to-record-terminal-gifs/</link><pubDate>Sat, 18 Jun 2022 16:40:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-how-to-record-terminal-gifs/</guid><description>&lt;p>If you need a tool to record commands in your terminal, including their input and output, take a look at &lt;a href="https://github.com/asciinema/asciinema">https://github.com/asciinema/asciinema&lt;/a>.&lt;/p>
&lt;p>It records your terminal session and allows you to upload them to their archive, which then you can share with the world, or download the media file.&lt;/p>
&lt;p>If you want to generate GIFs without uploading your sessions, there&amp;rsquo;s also: &lt;a href="https://github.com/asciinema/asciicast2gif">https://github.com/asciinema/asciicast2gif&lt;/a>&lt;/p>
&lt;p>If that still doesn&amp;rsquo;t meed your requirements, try &lt;a href="https://github.com/phw/peek">https://github.com/phw/peek&lt;/a>. Similar to GNOME&amp;rsquo;s screen recorder, but with more flexibility.&lt;/p>
&lt;p>Finally, if you need to record a voice over, I would recommend you the go-to tool for streaming and recording video: &lt;a href="https://obsproject.com/">OBS&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This is a micro-post about the GNU/Linux environment, its main purpose is to highlight and redirect to valuable resources.&lt;/p></description></item><item><title>#TLDR - How to search for files containing two or more strings</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-find-files-with-multiple-patterns/</link><pubDate>Sat, 18 Jun 2022 16:40:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-find-files-with-multiple-patterns/</guid><description>&lt;p>You might already know &lt;code>grep&lt;/code>, the program to find and return lines matching a given pattern, but what if you want to find files matching multiple patterns simultaneously? It&amp;rsquo;s simple, just chain searches, i.e find files matching the first pattern, then find files matching another pattern within the resulting list of the first search, and so on:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ grep -lr &lt;span style="color:#e6db74">&amp;#34;first pattern&amp;#34;&lt;/span> folder/to/search/* | grep -l &lt;span style="color:#e6db74">&amp;#34;another pattern&amp;#34;&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>cat -&lt;span style="color:#e6db74">`&lt;/span> | grep -l &lt;span style="color:#e6db74">&amp;#34;and so on...&amp;#34;&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>cat -&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using a real example; let&amp;rsquo;s search, in the Linux kernel folder, for &lt;code>.c&lt;/code> and &lt;code>.h&lt;/code> files importing &lt;code>&amp;quot;kunit/test.h&amp;quot;&lt;/code> than get their lines containing the word &amp;ldquo;module&amp;rdquo; (case-insensitive):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ grep -lr --include &lt;span style="color:#e6db74">&amp;#34;*.[ch]&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;kunit/test.h&amp;#39;&lt;/span> ./linux | grep -i &lt;span style="color:#e6db74">&amp;#39;module&amp;#39;&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>cat -&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notice info">
&lt;div class="notice-title">
&lt;i class="fa fa-exclamation-circle" aria-hidden="true">&lt;/i>Info
&lt;/div>
&lt;div class="notice-content">&lt;ul>
&lt;li>&lt;code>grep&lt;/code>: command&lt;/li>
&lt;li>&lt;code>-l&lt;/code>, &lt;code>--files-with-matches&lt;/code>: Suppress normal output; instead print the name of each file matching the pattern.&lt;/li>
&lt;li>&lt;code>-r&lt;/code>, &lt;code>--recursive&lt;/code>: Read all files under each directory, recursively.&lt;/li>
&lt;li>&lt;code>--include=GLOB&lt;/code>: Search only files whose base name matches GLOB using wildcard matching; here, files with the extensions &amp;ldquo;.c&amp;rdquo; or &amp;ldquo;.h&amp;rdquo;.&lt;/li>
&lt;li>&lt;code>'kunit/test.h'&lt;/code>: find files with this string&lt;/li>
&lt;li>&lt;code>./linux&lt;/code>: Start at &amp;ldquo;linux&amp;rdquo; folder under the current working directory.&lt;/li>
&lt;li>&lt;code>| grep&lt;/code>: pipe the output of the first command (list of filenames) to the next search&lt;/li>
&lt;li>&lt;code>-i&lt;/code>, &lt;code>--ignore-case&lt;/code>: Use case-insensitive pattern matching.&lt;/li>
&lt;li>&lt;code>'module'&lt;/code>: this time, search for the string &amp;ldquo;module&amp;rdquo;&lt;/li>
&lt;li>&lt;code>`cat -`&lt;/code>: search the files given by the standard input, in this case the piped result from the first &lt;code>grep&lt;/code>.&lt;/li>
&lt;/ul>&lt;/div>
&lt;/div>
&lt;p>This should run almost instantaneously, because &lt;code>grep&lt;/code> is powered by &lt;em>magic&lt;/em>.&lt;/p>
&lt;p>FYI: I&amp;rsquo;ve used this command to find out whether any Kunit tests were being exported as a module. Turns out, no, at least not that I could find.&lt;/p>
&lt;hr>
&lt;p>This is a micro-post about the GNU/Linux environment, its main purpose is to highlight and redirect to valuable resources.&lt;/p></description></item><item><title>#TLDR - How to compile the Linux Kernel using KWorkflow</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-compile-kernel-using-kw/</link><pubDate>Tue, 14 Jun 2022 09:00:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-compile-kernel-using-kw/</guid><description>&lt;p>If you already have a &lt;code>.config&lt;/code> file ready, one way to compile the Linux Kernel is to install &lt;a href="https://github.com/kworkflow/kworkflow">kw&lt;/a> and run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kw build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command is time and resource intensive, so it might slow down your system for some time. It might fail and ask you to install some dependencies. For more information read the &lt;a href="https://kworkflow.org/man/features/build.html">&lt;code>kw build&lt;/code> documentation&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>This is a micro-post about the Linux Kernel compilation process, its main purpose is to highlight and redirect to valuable resources.&lt;/p></description></item><item><title>#TLDR - How to create a basic .config using KWorkflow</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-create-kernel-config-using-kw/</link><pubDate>Mon, 13 Jun 2022 09:00:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-create-kernel-config-using-kw/</guid><description>&lt;p>One way to create a good enough &lt;code>.config&lt;/code> file is to install &lt;a href="https://github.com/kworkflow/kworkflow">kw&lt;/a> and run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kw configm --fetch --optimize
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command might ask if you want to overwrite the existing &lt;code>.config&lt;/code> file. It might also ask to define some other settings which, in general, will work when choosing the default option. Read more about the command at the &lt;a href="https://kworkflow.org/man/features/configm.html">&lt;code>kw configm&lt;/code> documentation&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>This is a micro-post about the Linux Kernel compilation process, its main purpose is to highlight and redirect to valuable resources.&lt;/p></description></item><item><title>How to use the GitLab API</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-use-gitlab-api/</link><pubDate>Fri, 07 Jan 2022 19:45:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-use-gitlab-api/</guid><description>&lt;h1 id="how-to-use-the-gitlab-api">
How to Use the GitLab API
&lt;a class="heading-link" href="#how-to-use-the-gitlab-api">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>Sometimes, when you don&amp;rsquo;t use a monorepo, it may be necessary to handle multiple repositories at once.
GitLab provides an easy way to do that, even with a free account!
All you have to do is find what you need in their &lt;a href="https://docs.gitlab.com/ee/api/">documentation&lt;/a>.&lt;/p>
&lt;p>The first step, is to create an access token, for that go to the &lt;a href="https://gitlab.com/-/profile">profile&lt;/a> page
and find the &lt;a href="https://gitlab.com/-/profile/personal_access_tokens">Access Tokens&amp;rsquo; settings&lt;/a>.
There you&amp;rsquo;ll be able to create a new token, with a configurable permission scope and expiration date.&lt;/p>
&lt;p>Lets say, for example, that you want to clone every repository from the group &lt;strong>ID: 3253154&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://tales-aparecida.github.io/tales-tips-and-tricks/tales-tips-and-tricks/images/gitlab-group-id.png" alt="GitLab Group ID: 3253154">&lt;/p>
&lt;p>To do that you can use the &lt;a href="https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects">&amp;ldquo;List a group&amp;rsquo;s projects&amp;rdquo;&lt;/a>,
which can be achieved with a &lt;code>read_api&lt;/code> permission.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl --request GET --header &lt;span style="color:#e6db74">&amp;#34;PRIVATE-TOKEN: this-should-be-your-token&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://gitlab.com/api/v4/groups/&lt;/span>$PROJECT_ID&lt;span style="color:#e6db74">/projects?simple=true&amp;#34;&lt;/span> &amp;gt; /tmp/projects.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will save a JSON with the ID, URL, name, and path of each project.
You can use Python to handle it and print the SSH urls to clone, like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/tmp/projects.json&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> fp:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_info &lt;span style="color:#f92672">=&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>load(fp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> project_info &lt;span style="color:#f92672">in&lt;/span> group_info:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;git clone&amp;#34;&lt;/span>, project_info[&lt;span style="color:#e6db74">&amp;#39;ssh_url_to_repo&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use &lt;code>subprocess.run()&lt;/code> to clone them.&lt;/p>
&lt;p>If you want to, you can even make requests using Python directly,
for example, to update every projects&amp;rsquo; Merge Request settings to use merge commits and forbid squash:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;this-should-be-your-token&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> project_info &lt;span style="color:#f92672">in&lt;/span> group_info:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests&lt;span style="color:#f92672">.&lt;/span>put(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;https://gitlab.com/api/v4/projects/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>project_info[&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#39;PRIVATE-TOKEN&amp;#39;&lt;/span>:token},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#39;merge_method&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;merge&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;squash_option&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;never&amp;#39;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it. There&amp;rsquo;s plenty more in their documentation, as I&amp;rsquo;ve said before, be creative and let your problems guide you.&lt;/p></description></item><item><title>How to setup your own website powered by Hugo</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-hugo/</link><pubDate>Tue, 29 Jun 2021 16:23:24 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-hugo/</guid><description>&lt;h1 id="what-is-hugo">
What is Hugo
&lt;a class="heading-link" href="#what-is-hugo">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>Hugo is a static HTML and CSS website generator written in &lt;a href="https://golang.org/">Go&lt;/a>. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.&lt;/p>
&lt;p>src: &lt;a href="https://github.com/gohugoio/hugo">https://github.com/gohugoio/hugo&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Or, in my case, it&amp;rsquo;s a tool that allowed me to setup my own blog, writing posts using Markdown and github.io for hosting.&lt;/p>
&lt;p>You can follow their &lt;a href="https://gohugo.io/getting-started/quick-start/">tutorial&lt;/a> to setup your static website too! Trust me, it&amp;rsquo;s pretty straight forward, just:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://gohugo.io/getting-started/installing/">Install Hugo&lt;/a>&lt;/li>
&lt;li>Create a new site with: &lt;code>hugo new site NAME_HERE&lt;/code>&lt;/li>
&lt;li>Add and customize a theme (there are dozens of options!)&lt;/li>
&lt;li>Add some content&lt;/li>
&lt;li>Check your workings&lt;/li>
&lt;li>Publish!&lt;/li>
&lt;/ol>
&lt;h1 id="add-and-customize-a-theme">
Add and customize a theme
&lt;a class="heading-link" href="#add-and-customize-a-theme">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>Hugo community has created many (almost 300 up until now) beautiful themes. You can choose one at their &lt;a href="themes.gohugo.io/">gallery&lt;/a>. Each one has its own set of customizations, which you can usually find more about in their GitHub page.&lt;/p>
&lt;p>This site, the one you are reading right now, uses &lt;a href="https://github.com/luizdepra/hugo-coder/">Hugo-Coder&lt;/a> as its theme, created by &lt;a href="https://github.com/luizdepra">Luiz de Prá&lt;/a>, which needed no effort besides cloning as a submodule with &lt;code>git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder&lt;/code> and setting a &lt;code>config.toml&lt;/code> file, which you may copy &lt;a href="https://github.com/tales-aparecida/tales-tips-and-tricks/blob/main/config.toml">from my repo&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://github.com/luizdepra/hugo-coder/raw/main/images/screenshot.png" alt="Hugo-coder home page">&lt;/p>
&lt;h1 id="add-some-content">
Add some content
&lt;a class="heading-link" href="#add-some-content">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>In this step you will need to run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>hugo new posts/my-first-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then fill the &lt;a href="https://www.markdownguide.org/">markdown&lt;/a> file with your own ideas!&lt;/p>
&lt;p>Note that Hugo posts have a header called &amp;ldquo;&lt;a href="https://gohugo.io/content-management/front-matter">Front Matter&lt;/a>&amp;rdquo;, a section at the top of the file in &lt;a href="https://gohugo.io/content-management/front-matter#front-matter-formats">4 different possible formats&lt;/a> where you can set attributes about your post, like &lt;code>title&lt;/code>, &lt;code>description&lt;/code>, &lt;code>date&lt;/code> and &lt;code>tags&lt;/code>.&lt;/p>
&lt;h1 id="check-your-workings">
Check your workings
&lt;a class="heading-link" href="#check-your-workings">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>To visualize your website in a browser, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there aren&amp;rsquo;t any errors, this should print something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Start building sites …
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | EN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------+-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pages | 26
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Paginator pages | 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Non-page files | 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Static files | 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Processed images | 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Aliases | 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sitemaps | 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cleaned | 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Built in 79 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Watching for changes in /home/tales/codes/tales-tips-and-tricks/{archetypes,content,data,layouts,static,themes}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Watching for config changes in /home/tales/codes/tales-tips-and-tricks/config.toml, /home/tales/codes/tales-tips-and-tricks/themes/hugo-coder/config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Environment: &amp;#34;development&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Serving pages from memory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Press Ctrl+C to stop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which, if you read it carefully, tells that your website can be accessed through http://localhost:1313.&lt;/p>
&lt;h1 id="publish">
Publish
&lt;a class="heading-link" href="#publish">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>At last, to publish your new static website there are some &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">alternatives&lt;/a>, the one I&amp;rsquo;ve chosen was &lt;a href="https://help.github.com/articles/what-is-github-pages/">GitHub Pages&lt;/a> hosted on GitHub&amp;rsquo;s github.io domain, using GitHub Actions.&lt;/p>
&lt;p>You just need to create a branch &amp;ldquo;gh-pages&amp;rdquo; then go to the repository settings and activate it as the source to your website.&lt;/p>
&lt;p>&lt;img src="https://tales-aparecida.github.io/tales-tips-and-tricks/tales-tips-and-tricks/images/gh-pages.png" alt="Activate GitHub Page in the repo settings">&lt;/p>
&lt;p>Then, create a &lt;code>.github/workflows/gh-pages.yml&lt;/code> in your main branch to setup the GitHub Actions pipeline, which will build the statics into the &lt;code>gh-pages&lt;/code> branch, you can copy my &lt;a href="https://github.com/tales-aparecida/tales-tips-and-tricks/blob/main/.github/workflows/gh-pages.yml">&lt;code>gh-pages.yml&lt;/code>&lt;/a> if you want to, which I got from &lt;a href="https://github.com/peaceiris/actions-hugo">https://github.com/peaceiris/actions-hugo&lt;/a>.&lt;/p>
&lt;p>That&amp;rsquo;s it, in your next &lt;code>git push&lt;/code> you will trigger the deploy and your website will be accessible through the URL informed while activating the GitHub Pages. :D&lt;/p>
&lt;h2 id="userorganization-page-vs-repository-page">
User/Organization page vs Repository page
&lt;a class="heading-link" href="#userorganization-page-vs-repository-page">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h2>
&lt;p>You&amp;rsquo;ll notice that the URL hosting your website looks something like: &lt;code>https://YOUR-USERNAME.github.io/YOUR-REPO-NAME/&lt;/code>.
To fix that, either rename your repository to &lt;code>YOUR-USERNAME.github.io&lt;/code> or create a repository with that name with a page responsible for redirecting into the correct path.
In that case, you just need to activate the GitHub Pages in the new repo and add the file &lt;code>index.html&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Redirecting...&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- Redirects to the correct GitHub Pages path in 0 seconds --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">http-equiv&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;refresh&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0; URL=&amp;#39;/YOUR-REPO-NAME/&amp;#39;&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="alternatives">
Alternatives
&lt;a class="heading-link" href="#alternatives">
&lt;i class="fa fa-link" aria-hidden="true">&lt;/i>
&lt;/a>
&lt;/h1>
&lt;p>If Hugo didn&amp;rsquo;t spark your interest, give a chance to &lt;a href="https://docs.github.com/pt/pages/setting-up-a-github-pages-site-with-jekyll">Jekyll&lt;/a>,
the static website generator endorsed by GitHub.&lt;/p></description></item></channel></rss>