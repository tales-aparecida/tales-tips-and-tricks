<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tales L. Aparecida on Tales Tips and Tricks</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/authors/tales-l.-aparecida/</link><description>Recent content in Tales L. Aparecida on Tales Tips and Tricks</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 13 Jun 2022 09:00:00 -0300</lastBuildDate><atom:link href="https://tales-aparecida.github.io/tales-tips-and-tricks/authors/tales-l.-aparecida/index.xml" rel="self" type="application/rss+xml"/><item><title>#TLDR - How to create a basic .config using KWorkflow</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-create-kernel-config-using-kw/</link><pubDate>Mon, 13 Jun 2022 09:00:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/tldr-create-kernel-config-using-kw/</guid><description>One way to create a good enough .config file is to install kw and run:
$ kw configm --fetch --optimize The command might ask if you want to overwrite the existing .config file. It might also ask to define some other settings which, in general, will work when choosing the default option. Read more about the command at the kw configm documentation.
This is a micro-post about the Linux Kernel compilation process, its main purpose is to highlight and redirect to valuable resources.</description></item><item><title>Finding bugs using IGT and git bisect</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/gsoc-report-2/</link><pubDate>Sun, 12 Jun 2022 12:00:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/gsoc-report-2/</guid><description>The first step to eliminate bugs is to find a way how to reproduce them consistently. Wait&amp;hellip; what?
Test suites are great for that, since they can simulate very specific behavior in a timely manner. IGT GPU Tools is a collection of tools for development and testing of the DRM drivers, and, as such, it can help us to find and reproduce bugs.
I intend to help expand the AMDGPU tests&amp;rsquo; list in my the GSoC project, so it made sense trying to run them right away.</description></item><item><title>My experience as a Google Summer of Code Contributor - Introduction</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/gsoc-report-1/</link><pubDate>Mon, 06 Jun 2022 12:00:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/gsoc-report-1/</guid><description>So it begins!
With some pushes and pulls from friends, I&amp;rsquo;ve been studying the Linux Graphical stack for some time now. After some minor patches to both Mesa and the Linux Kernel, I followed the instructions thoroughly and landed a successful Google Summer of Code proposal:
Introduce Unit Tests to the AMDGPU “DCE” Component My project’s primary goal is to create unit tests using KUnit for the AMDGPU driver focused on the Display and Compositing Engine (DCE) 11.</description></item><item><title>How to use the GitLab API</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-use-gitlab-api/</link><pubDate>Fri, 07 Jan 2022 19:45:00 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-use-gitlab-api/</guid><description>How to Use the GitLab API Sometimes, when you don&amp;rsquo;t use a monorepo, it may be necessary to handle multiple repositories at once. GitLab provides an easy way to do that, even with a free account! All you have to do is find what you need in their documentation.
The first step, is to create an access token, for that go to the profile page and find the Access Tokens&amp;rsquo; settings.</description></item><item><title>How to setup your own website powered by Hugo</title><link>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-hugo/</link><pubDate>Tue, 29 Jun 2021 16:23:24 -0300</pubDate><guid>https://tales-aparecida.github.io/tales-tips-and-tricks/posts/how-to-hugo/</guid><description>What is Hugo Hugo is a static HTML and CSS website generator written in Go. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.
src: https://github.com/gohugoio/hugo
Or, in my case, it&amp;rsquo;s a tool that allowed me to setup my own blog, writing posts using Markdown and github.io for hosting.
You can follow their tutorial to setup your static website too!</description></item></channel></rss>